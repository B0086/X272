#include <iostream>
#include <string>
#include <algorithm>
#include <windows.h>
#include <tlhelp32.h>

bool isProcessRunning(const std::string& processName) {
    bool exists = false;
    PROCESSENTRY32 entry;
    entry.dwSize = sizeof(PROCESSENTRY32);

    HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL);

    if (Process32First(snapshot, &entry)) {
        do {
            std::string exeFile = entry.szExeFile;
            std::transform(exeFile.begin(), exeFile.end(), exeFile.begin(), ::tolower);
            if (exeFile.find("pid") != std::string::npos) {
                exists = true;
                break;
            }
        } while (Process32Next(snapshot, &entry));
    }

    CloseHandle(snapshot);
    return exists;
}

void killProcess(const std::string& processName) {
    HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL);
    PROCESSENTRY32 entry;
    entry.dwSize = sizeof(PROCESSENTRY32);

    if (Process32First(snapshot, &entry)) {
        do {
            std::string exeFile = entry.szExeFile;
            std::transform(exeFile.begin(), exeFile.end(), exeFile.begin(), ::tolower);
            if (exeFile.find("pid") != std::string::npos) {
                HANDLE hProcess = OpenProcess(PROCESS_TERMINATE, FALSE, entry.th32ProcessID);
                if (hProcess != NULL) {
                    TerminateProcess(hProcess, 0);
                    CloseHandle(hProcess);
                }
            }
        } while (Process32Next(snapshot, &entry));
    }

    CloseHandle(snapshot);
}

int main() {
    if (isProcessRunning("pid")) {
        std::cout << "'PID' iceren bir proses bulundu. Kapatiliyor..." << std::endl;
        killProcess("pid");
        std::cout << "Proses basariyla kapatildi." << std::endl;
    } else {
        std::cout << "'PID' iceren bir proses bulunamadi." << std::endl;
    }

    return 0;
}
