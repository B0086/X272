import socket
from urllib.parse import parse_qs
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import base64
from datetime import datetime, timedelta
import os

SECRET_KEY = b'aundkridlsimnfir'
LICENSE_DURATION = timedelta(days=30)
FILE_PATH = "C:/xampp/htdocs/HoIAvo.sys"  # İndirilmek istenen dosyanın yolu

def decrypt_AES(ciphertext, key):
    if len(key) not in [16, 24, 32]:
        raise ValueError("AES key must be either 16, 24, or 32 bytes long")
    
    cipher = AES.new(key, AES.MODE_CBC, iv=key[:16])
    decrypted = unpad(cipher.decrypt(ciphertext), AES.block_size)
    return decrypted.decode('utf-8')

def load_licenses(filename='license.txt'):
    licenses = {}
    try:
        with open(filename, 'r') as file:  # Parantez düzeltildi
            for line in file:
                parts = line.strip().split(',')
                if len(parts) == 3:
                    license_key, expiry_str, volume_id = parts
                else:
                    license_key, expiry_str = parts
                    volume_id = None
                licenses[license_key] = {
                    'expiry_date': datetime.strptime(expiry_str, '%Y-%m-%d %H:%M:%S'),
                    'volume_id': volume_id
                }
            print(f"Loaded licenses: {licenses}")
    except FileNotFoundError:
        pass
    return licenses

def save_license(license_key, volume_id, filename='license.txt'):
    updated_lines = []
    try:
        with open(filename, 'r') as file:
            for line in file:
                parts = line.strip().split(',')
                if parts[0] == license_key:
                    if parts[2] and parts[2] != volume_id:  # If VolumeID is already filled and different
                        raise ValueError("License is already assigned to another machine")
                    line = f"{license_key},{parts[1]},{volume_id}\n"
                updated_lines.append(line)
        
        with open(filename, 'w') as file:
            file.writelines(updated_lines)
    except FileNotFoundError:
        pass

def log_request(data):
    with open('log.txt', 'a') as log_file:
        log_file.write(data + '\n')

def send_file(client_socket, file_path):
    try:
        with open(file_path, 'rb') as file:
            while True:
                data = file.read(4096)
                if not data:
                    break
                client_socket.sendall(data)
        print("File sent successfully")
    except Exception as e:
        print(f"Failed to send file: {e}")
        client_socket.send(b"error")

def main():
    valid_licenses = load_licenses()

    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind(('0.0.0.0', 1234))  # Change to 0.0.0.0 to listen on all network interfaces
    server_socket.listen(5)
    print("Server listening on port 1234")

    while True:
        client_socket, addr = server_socket.accept()
        print(f"Connection from {addr}")

        encrypted_data = client_socket.recv(4096)
        print(f"Received encrypted data length: {len(encrypted_data)}")
        
        try:
            decrypted_data = decrypt_AES(encrypted_data, SECRET_KEY)
            print(f"Decrypted data: {decrypted_data}")

            # Log the decrypted data
            log_request(decrypted_data)

            params = parse_qs(decrypted_data)
            print(f"Parsed params: {params}")

            license_key = params.get('LicenseKey', [None])[0]
            volume_id = params.get('VolumeID', [None])[0]

            print(f"License Key: {license_key}, Volume ID: {volume_id}")

            current_time = datetime.now()
            if license_key in valid_licenses:
                expiry_date = valid_licenses[license_key]['expiry_date']
                if current_time < expiry_date:
                    # Update volume_id in license.txt if valid
                    try:
                        save_license(license_key, volume_id)
                        valid_licenses[license_key]['volume_id'] = volume_id
                        response = "success"
                    except ValueError as e:
                        response = f"failure,{str(e)}"
                else:
                    response = "failure,license expired"
                    print("License has expired")
            else:
                response = "failure,invalid license"
                print("Invalid license key")

            print(f"Response: {response}")
            client_socket.send(response.encode())

            # Eğer lisans doğrulaması başarılı olduysa dosyayı gönder
            if response == "success":
                send_file(client_socket, FILE_PATH)

        except ValueError as e:
            print(f"Decryption error: {e}")
            client_socket.send("error".encode())

        client_socket.close()

if __name__ == "__main__":
    main()
